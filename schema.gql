
type User {
    name: String!
    email: String! @unique
    tabs: [Tab!] @relation(name: "user_tabs")
    chords: [ChordChart!] @relation(name: "user_chordcharts")
}

type Track {
    spotifyId: String! @unique
    tabs: [Tab!]! @relation
    chords: [ChordChart!]! @relation
}


type Tab {
    approved: Boolean!
    musicXml: String!
    rating: Int!
    author: User! @relation(name: "user_tabs")
    description: String!
    track: Track! @relation
}


type ChordChart {
    approved: Boolean!
    chords: [Beat!]!
    rating: Int!
    author: User! @relation(name: "user_chordcharts")
    description: String!
    dateSubmitted: String!
    track: Track @relation
}

type Beat @embedded {
    start: Float!
    duration: Float!
    chord: Chord!
}

type Chord @embedded {
    tonality: String!
    type: String!
    extension: String
}


type Mutation {
    registerUser(email: String!, password: String!, name: String!): User @resolver(name: "registerUser")
    login(email: String!, password: String!): Token @resolver(name: "login")
}

type Query {
  findUserByEmail(email: String): User
}
# Embeded type for returned token response
type Token @embedded {
    ttl: Time!
    secret: String!
    email: String!
    ownerId: String!
}